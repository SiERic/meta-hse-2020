#lang racket

(provide mix)

(define mix
  '((read program division vs0)
    
    (init                       (:= pending (set (list (caadr program) vs0)))
                                (:= marked  (set (list (caadr program) vs0)))
                                (:= residual (init-residual program division))
                                (:= blocks-in-pending (get-blocks-in-pending program division))
                                (goto pending-loop-cond))
    (pending-loop-cond          (if (set-empty? pending) pending-loop-end pending-loop))
    (pending-loop               (:= ppp (car (set-first pending)))
                                (:= vs  (cadr (set-first pending)))
                                (:= pending (set-rest pending))
                                (:= marked  (set-add marked (list ppp vs)))
                                (:= code (initial-code ppp vs))
                                (goto the-trick-init))
    (the-trick-init             (:= pp (caadr program))
                                (goto the-trick-check))
    (the-trick-check            (if (equal? '() pp) error the-trick-cond))
    (the-trick-cond             (if (equal? ppp pp) the-trick-end the-trick-next))
    (the-trick-next             (:= pp (next-label-after pp blocks-in-pending))
                                (goto the-trick-check))
    (the-trick-end              (:= bb (lookup pp program))
                                (goto bb-loop-cond))
    (bb-loop-cond               (if (< (length bb) 2) bb-loop-end bb-loop))
    (bb-loop                    (:= command (first-command bb))
                                (:= bb (rest bb))
                                (goto command-case1))
    (command-case1              (if (equal? (car command) ':=)     command-assignment      command-case2))
    (command-case2              (if (equal? (car command) 'goto)   command-goto            command-case3))
    (command-case3              (if (equal? (car command) 'if)     command-if              command-case4))
    (command-case4              (if (equal? (car command) 'return) command-return          error))
    (command-assignment         (:= x (cadr command))
                                (:= expr (caddr command))
                                (if (is-static-var? x division) command-assignment-static command-assignment-dynamic))
    (command-assignment-static  (:= vs (substitute vs x (eval-expr expr vs)))
                                (goto bb-loop-cond))
    (command-assignment-dynamic (:= code (extend-block code (list ':= x (reduce-expr expr vs division))))
                                (goto bb-loop-cond))
    (command-goto               (:= bb (lookup (cadr command) program))
                                (goto bb-loop-cond))
    (command-if                 (:= expr (cadr command))
                                (if (is-static-expr? expr division) command-if-static command-if-dynamic))
    (command-if-static          (if (eval-expr expr vs) command-if-static-true command-if-static-false))
    (command-if-static-true     (:= bb (lookup (caddr command) program))
                                (goto bb-loop-cond))
    (command-if-static-false    (:= bb (lookup (cadddr command) program))
                                (goto bb-loop-cond))
    (command-if-dynamic         (:= pp-then (caddr command))
                                (:= pp-else (cadddr command))
                                (:= pending (set-union pending (set-subtract (set (list pp-then (clear-vs vs vs0)) (list pp-else (clear-vs vs vs0))) marked)))
                                (:= code (extend-block code (list 'if (reduce-expr expr vs division) (name-block pp-then (clear-vs vs vs0)) (name-block pp-else (clear-vs vs vs0)))))
                                (goto bb-loop-cond))
    (command-return             (:= code (extend-block code (list 'return (reduce-expr (cadr command) vs division))))
                                (goto bb-loop-cond))
    
    (bb-loop-end                (:= residual (extend-program residual code))
                                (goto pending-loop-cond))
    
    (pending-loop-end           (return (rename residual)))
    (error                      (return '()))))