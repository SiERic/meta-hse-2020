#lang racket

(provide fc-int)

(define fc-int
  '((read program data)
    (init               (:= data-vars (cdar program))
                        (:= ns (create-ns (map cons data-vars data)))
                        (:= bb-ns (create-ns (cdr program)))
                        (:= bb (cdadr program))
                        (goto bb-loop-cond))
    (bb-loop-cond       (if (empty? bb) error bb-loop))
    (bb-loop            (:= command (car bb))
                        (:= bb (cdr bb))
                        (goto command-case1))
    (command-case1      (if (equal? (car command) ':=)     command-assignment      command-case2))
    (command-case2      (if (equal? (car command) 'goto)   command-goto            command-case3))
    (command-case3      (if (equal? (car command) 'if)     command-if              command-case4))
    (command-case4      (if (equal? (car command) 'return) command-return          error))
    (command-assignment (:= ns (eval-assign-ns (cadr command) (eval-expr-ns (caddr command) ns) ns))
                        (goto bb-loop-cond))
    (command-goto       (:= bb (eval-expr-ns (cadr command) bb-ns))
                        (goto bb-loop-cond))
    (command-if         (if (eval-expr-ns (cadr command) ns) command-if-true command-if-false))
    (command-if-true    (:= bb (eval-expr-ns (caddr command) bb-ns))
                        (goto bb-loop-cond))
    (command-if-false   (:= bb (eval-expr-ns (cadddr command) bb-ns))
                        (goto bb-loop-cond))
    (command-return     (return (eval-expr-ns (cadr command) ns)))
    (error              (return '()))))