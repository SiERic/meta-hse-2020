#lang racket

(require "flowchart.rkt")
(provide tm-int)

;; Post Turing Machine interpreter for FlowChart

(define tm-int 
  '((read q right)
    (init        (:= qtail q)
                 (:= left '())
                 (:= space '2)
                 (goto loop))
    (loop        (if (null? qtail) stop check-right))
    (check-right (if (null? right) pad-right check-left))
    (check-left  (if (null? left)  pad-left  cont))
    (pad-right   (:= right `(,space))
                 (goto check-left))
    (pad-left    (:= left  `(,space))
                 (goto cont))
    (cont        (:= instruction (car qtail))
                 (:= qtail (cdr qtail))
                 (:= operator (cadr instruction))
                 (if (equal? operator 'right) do-right cont1))
    (cont1       (if (equal? operator 'left)  do-left  cont2))
    (cont2       (if (equal? operator 'write) do-write cont3))
    (cont3       (if (equal? operator 'goto)  do-goto  cont4))
    (cont4       (if (equal? operator 'if  )  do-if    error))
    (do-right    (:= left  (cons (car right) left))
                 (:= right (cdr right))
                 (goto loop))
    (do-left     (:= right (cons (car left) right))
                 (:= left  (cdr left))
                 (goto loop))
    (do-write    (:= symbol (caddr instruction))
                 (:= right (cons symbol (cdr right)))
                 (goto loop))
    (do-goto     (:= nextlabel (caddr instruction))
                 (:= qtail (list-tail q nextlabel))
                 (goto loop))
    (do-if       (:= symbol (caddr instruction))
                 (:= nextlabel (fifth instruction))
                 (if (equal? symbol (car right)) jump loop))
    (jump        (:= qtail (list-tail q nextlabel))
                 (goto loop))
    (error       (return (list 'syntaxerror: instruction)))
    (stop        (return (dropf-right right (lambda (x) (eq? x space)))))
))